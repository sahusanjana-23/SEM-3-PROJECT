
import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

class StudentManagementApp:
    font_style = ('Helvetica', 40) # Define font_style as a class attribute
    button_font_style = ('Helvetica', 20) # Adjusted font size for buttons

    def __init__(self, master):
        self.master = master
        self.master.title("Student Management System - Login")
        self.master.geometry("500x500")
        self.master.attributes('-fullscreen', True)  # Full screen on initialization

        # Add Login heading
        login_heading_label = tk.Label(self.master, text="Login", font=("Arial", 27, "bold"))
        login_heading_label.pack(pady=10) # Adjust padding as needed

        tk.Label(self.master, text="Username:", font=self.font_style).pack()
        self.username_entry = tk.Entry(self.master, font=self.font_style)
        self.username_entry.pack()

        tk.Label(self.master, text="Password:", font=self.font_style).pack()
        self.password_entry = tk.Entry(self.master, show="*", font=self.font_style)
        self.password_entry.pack()

        tk.Button(self.master, text="Login", command=self.login, font=self.font_style, bg="green").pack()

    def open_manage_students_window(self):
        manage_window = tk.Toplevel(self.master)
        manage_window.geometry("500x500")
        manage_window.title("Manage Students")
        manage_window.attributes('-fullscreen', True)  # Full screen after login
        font_style = ('Helvetica', 20)
        button_font_style = ('Helvetica', 20) # Adjusted font size for buttons


        # Create a menu bar
        menubar = tk.Menu(manage_window)
        manage_window.config(menu=menubar)

        # Create a File menu
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Exit", command=manage_window.quit)

        # Create buttons for managing students
        tk.Button(manage_window, text="Add Student", command=self.open_add_student_window, font=self.button_font_style, bg="blue").pack(pady=10)
        tk.Button(manage_window, text="Update Student", command=self.open_update_student_window, font=self.button_font_style, bg="orange").pack(pady=10)
        tk.Button(manage_window, text="Delete Student", command=self.open_delete_student_window, font=self.button_font_style, bg="red").pack(pady=10)
        tk.Button(manage_window, text="Show Students", command=self.show_students, font=self.button_font_style, bg="purple").pack(pady=10)

        tk.Label(manage_window, text="Search by Name:", font=self.button_font_style).pack(pady=5)
        self.search_entry = tk.Entry(manage_window, font=self.button_font_style)
        self.search_entry.pack()
        tk.Button(manage_window, text="Search", command=self.search_students, font=self.button_font_style, bg="yellow").pack(pady=5)

        # Add the Next button
        tk.Button(manage_window, text="Next", command=self.next_action, font=self.button_font_style, bg="green").pack(pady=10)

    def open_feedback_form(self):
        feedback_window = tk.Toplevel(self.master)
        feedback_window.title("Feedback Form")
        feedback_window.geometry("500x600")
        feedback_window.attributes('-fullscreen', True)  # Full screen after login

        font_style = ('Helvetica', 20)

        tk.Label(feedback_window, text="Student Feedback Form", font=('Helvetica', 20, 'bold'), pady=10).pack()

        tk.Label(feedback_window, text="Student Name:", font=font_style).pack()
        name_entry = tk.Entry(feedback_window, font=font_style)
        name_entry.pack()

        tk.Label(feedback_window, text="Email:", font=font_style).pack()
        email_entry = tk.Entry(feedback_window, font=font_style)
        email_entry.pack()

        tk.Label(feedback_window, text="Area of Improvement:", font=font_style).pack()
        improvement_entry = tk.Entry(feedback_window, font=font_style)
        improvement_entry.pack()

        tk.Label(feedback_window, text="Academic Progress Feedback:", font=font_style).pack()
        academic_progress_var = tk.StringVar()
        ttk.Combobox(feedback_window, textvariable=academic_progress_var, values=["Excellent", "Good", "Average", "Poor"]).pack()

        tk.Label(feedback_window, text="Behaviour Feedback:", font=font_style).pack()
        behaviour_var = tk.StringVar()
        ttk.Combobox(feedback_window, textvariable=behaviour_var, values=["Excellent", "Good", "Average", "Poor"]).pack()

        tk.Label(feedback_window, text="Attendance Feedback:", font=font_style).pack()
        attendance_var = tk.StringVar()
        ttk.Combobox(feedback_window, textvariable=attendance_var, values=["Excellent", "Good", "Average", "Poor"]).pack()

        tk.Label(feedback_window, text="Overall Rating:", font=font_style).pack()
        overall_rating_var = tk.StringVar()
        ttk.Radiobutton(feedback_window, text="Excellent", variable=overall_rating_var, value="Excellent").pack()
        ttk.Radiobutton(feedback_window, text="Good", variable=overall_rating_var, value="Good").pack()
        ttk.Radiobutton(feedback_window, text="Average", variable=overall_rating_var, value="Average").pack()
        ttk.Radiobutton(feedback_window, text="Poor ", variable=overall_rating_var, value="Poor").pack()

        def submit_feedback():
            messagebox.showinfo("Thank You", "Feedback submitted successfully!")
            feedback_window.destroy()

        tk.Button(feedback_window, text="Submit", command=submit_feedback, font=font_style, bg="green").pack(pady=20)

    def next_action(self):
        messagebox.showinfo("Next Action", "Perform the next action here.")
        self.open_feedback_form()

    def open_add_student_window(self):
        add_window = tk.Toplevel(self.master)
        add_window.geometry("500x500")
        add_window.title("Add Student")
     
       

        font_style = ('Helvetica', 16) # Increased font size

        labels = ['Name', 'Age', 'Grade', 'Email', 'Contact Number', 'Address', 'Date Enrolled']
        entries = []

        for i, text in enumerate(labels):
            tk.Label(add_window, text=text, font=font_style).pack()
            entry_var = tk.Entry(add_window, font=font_style)
            entry_var.pack()
            entries.append(entry_var)

        tk.Button(add_window, text="Submit", command=lambda: self.submit_student(entries), font=font_style, bg="green").pack()

    def open_update_student_window(self):
        update_window = tk.Toplevel(self.master)
        update_window.geometry("500x500")
        update_window.title("Update Student")
       

        font_style = ('Helvetica', 16) # Increased font size

        tk.Label(update_window, text="Enter Student ID to Update:", font=font_style).pack()
        id_entry = tk.Entry(update_window, font=font_style)
        id_entry.pack()

        tk.Button(update_window, text="Submit", command=lambda: self.submit_update(id_entry.get()), font=font_style, bg="orange").pack()

    def open_delete_student_window(self):
        delete_window = tk.Toplevel(self.master)
        delete_window.geometry("500x500")
        delete_window.title("Delete Student")
 

        font_style = ('Helvetica', 16) # Increased font size

        tk.Label(delete_window, text="Enter Student ID to Delete:", font=font_style).pack()
        id_entry = tk.Entry(delete_window, font=font_style)
        id_entry.pack()

        tk.Button(delete_window, text="Submit", command=lambda: self.submit_delete(id_entry.get()), font=font_style, bg="red").pack()

    def add_student_to_db(self, data):
        conn = self.create_db_connection()
        if conn is not None:
            try:
                c = conn.cursor()
                c.execute("INSERT INTO students (name, age, grade, email, contact_number, address, date_enrolled) VALUES (?, ?, ?, ?, ?, ?, ?)", data)
                conn.commit()
            except sqlite3.Error as e:
                messagebox.showerror("Insertion Error", str(e))
            finally:
                conn.close()

    def update_student_in_db(self, student_id, data):
        conn = self.create_db_connection()
        if conn is not None:
            try:
                c = conn.cursor()
                c.execute("UPDATE students SET name=?, age=?, grade=?, email=?, contact_number=?, address=?, date_enrolled=? WHERE id=?", data + (student_id,))
                conn.commit()
            except sqlite3.Error as e:
                messagebox.showerror("Update Error", str(e))
            finally:
                conn.close()

    def delete_student_from_db(self, student_id):
        conn = self.create_db_connection()
        if conn is not None:
            try:
                c = conn.cursor()
                c.execute("DELETE FROM students WHERE id=?", (student_id,))
                conn.commit()
            except sqlite3.Error as e:
                messagebox.showerror("Delete Error", str(e))
            finally:
                conn.close()

    def submit_student(self, entries):
        data = [e.get() for e in entries]
        if "" not in data:
            self.add_student_to_db(tuple(data))
            messagebox.showinfo('Success', 'Student added successfully!')
            self.clear_entries(entries)
            self.show_students()
        else:
            messagebox.showerror('Error', 'Please fill in all fields.')

    def submit_update(self, student_id):
        entries = self.get_entries("Update Student")
        data = [e.get() for e in entries]
        if "" not in data and student_id.isdigit():
            self.update_student_in_db(student_id, tuple(data))
            messagebox.showinfo('Success', 'Student updated successfully!')
            self.clear_entries(entries)
            self.show_students()
        else:
            messagebox.showerror('Error', 'Please enter a valid student ID and fill in all fields.')

    def submit_delete(self, student_id):
        if student_id.isdigit():
            self.delete_student_from_db(student_id)
            messagebox.showinfo('Success', 'Student deleted successfully!')
            self.show_students()
        else:
            messagebox.showerror('Error', 'Please enter a valid student ID.')

    def clear_entries(self, entries):
        for entry in entries:
            entry.delete(0, tk.END)

    def show_students(self):
        display_window = tk.Toplevel(self.master)
        display_window.title("Students List")

        screen_width = display_window.winfo_screenwidth()
        window_width = 500
        x_coordinate = screen_width - window_width

        display_window.geometry(f"500x500+400+60")

        heading_font_style = ('Helvetica', 24)
        tk.Label(display_window, text="Student List", font=heading_font_style, pady=10).pack()

        tree = ttk.Treeview(display_window)
        tree["columns"] = ("ID", "Name", "Age", "Grade", "Email", "Contact Number", "Address", "Date Enrolled")

        tree.column("#0", width=0, stretch=tk.NO)
        tree.column("ID", anchor=tk.CENTER, width=50)
        tree.column("Name", anchor=tk.CENTER, width=100)
        tree.column("Age", anchor=tk.CENTER, width=50)
        tree.column("Grade", anchor=tk.CENTER, width=50)
        tree.column("Email", anchor=tk.CENTER, width=150)
        tree.column("Contact Number", anchor=tk.CENTER, width=100)
        tree.column("Address", anchor=tk.CENTER, width=100)
        tree.column("Date Enrolled", anchor=tk.CENTER, width=100)

        tree.heading("#0", text="", anchor=tk.CENTER)
        tree.heading("ID", text="ID", anchor=tk.CENTER)
        tree.heading("Name", text="Name", anchor=tk.CENTER)
        tree.heading("Age", text="Age", anchor=tk.CENTER)
        tree.heading("Grade", text="Grade", anchor=tk.CENTER)
        tree.heading("Email", text="Email", anchor=tk.CENTER)
        tree.heading("Contact Number", text="Contact Number", anchor=tk.CENTER)
        tree.heading("Address", text="Address", anchor=tk.CENTER)
        tree.heading("Date Enrolled", text="Date Enrolled", anchor=tk.CENTER)

        conn = self.create_db_connection()
        if conn is not None:
            try:
                c = conn.cursor()
                c.execute("SELECT * FROM students")
                for student in c.fetchall():
                    tree.insert("", tk.END, values=student)
            except sqlite3.Error as e:
                messagebox.showerror("Fetch Error", str(e))
            finally:
                conn.close()

        tree.pack(expand=True, fill="both")

    def search_students(self):
        search_name = self.search_entry.get()
        conn = self.create_db_connection()
        if conn is not None:
            try:
                c = conn.cursor()
                c.execute("SELECT * FROM students WHERE name=?", (search_name,))
                result = c.fetchall()
                if result:
                    result_window = tk.Toplevel(self.master)
                    result_window.title("Search Results")
                    result_window.geometry("500x500")
                   

                    heading_font_style = ('Helvetica', 24)
                    tk.Label(result_window, text="Search Results", font=heading_font_style, pady=10).pack()

                    result_font_style = ('Helvetica', 14)
                    for student in result:
                        student_details = f"ID: {student[0]}\nName: {student[1]}\nAge: {student[2]}\nGrade: {student[3]}\nEmail: {student[4]}\nContact Number: {student[5]}\nAddress: {student[6]}\nDate Enrolled: {student[7]}"
                        tk.Label(result_window, text=student_details, font=result_font_style).pack()
                else:
                    messagebox.showinfo("Search Result", "No matching records found.")
            except sqlite3.Error as e:
                messagebox.showerror("Search Error", str(e))
            finally:
                conn.close()

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if username == "sanjana" and password == "1234":
            messagebox.showinfo("Login Success", "You have successfully logged in.")
            self.master.title("Student Management System - Logged In") # Update window title
            self.master.withdraw() # Hide the login window
            self.initialize_db()
            self.open_manage_students_window()
        else:
            messagebox.showerror("Login Failed", "Invalid username or password")

    def create_db_connection(self):
        try:
            conn = sqlite3.connect('student.db')
            return conn
        except sqlite3.Error as e:
            messagebox.showerror("Connection Error", str(e))
        return None

    def initialize_db(self):
        conn = self.create_db_connection()
        if conn is not None:
            try:
                c = conn.cursor()
                c.execute('''CREATE TABLE IF NOT EXISTS students
                             (id INTEGER PRIMARY KEY,
                              name TEXT NOT NULL,
                              age INTEGER,
                              grade TEXT,
                              email TEXT,
                              contact_number TEXT,
                              address TEXT,
                              date_enrolled TEXT)''')
                conn.commit()
            except sqlite3.Error as e:
                messagebox.showerror("Database Error", str(e))
            finally:
                conn.close()

def main():
    root = tk.Tk()
    app = StudentManagementApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
