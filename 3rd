import tkinter as tk
from tkinter import messagebox

class Node:
    """
    A class to represent a node in a singly linked list
    """
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    """
    A class to represent a singly linked list
    """
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def delete_at_beginning(self):
        if self.is_empty():
            return None
        deleted_node = self.head
        self.head = self.head.next
        return deleted_node.data

    def delete_at_end(self):
        if self.is_empty():
            return None
        if self.head.next is None:
            deleted_node = self.head
            self.head = None
            return deleted_node.data
        current = self.head
        while current.next.next:
            current = current.next
        deleted_node = current.next
        current.next = None
        return deleted_node.data

    def traverse(self):
        if self.is_empty():
            return "List is empty"
        result = []
        current = self.head
        while current:
            result.append(str(current.data))
            current = current.next
        return " -> ".join(result) + " -> None"


class LinkedListGUI:
    def __init__(self, root):
        self.list = LinkedList()

        # Window configuration
        root.title("Linked List Application")
        root.geometry("500x500")
        root.config(bg="lightblue")

        # Heading
        heading = tk.Label(root, text="Sanjana Sahu S106", font=("Helvetica", 16), bg="lightblue", fg="purple")
        heading.pack(pady=10)

        # Output text area
        self.output = tk.Text(root, height=10, width=40, bg="lightyellow", fg="blue")
        self.output.pack(pady=10)

        # Entry for linked list elements
        self.entry = tk.Entry(root, width=15, font=("Helvetica", 14))
        self.entry.pack(pady=5)

        # Buttons for linked list operations
        insert_beginning_button = tk.Button(root, text="Insert at Beginning", command=self.insert_at_beginning, bg="green", fg="white")
        insert_beginning_button.pack(pady=5)

        insert_end_button = tk.Button(root, text="Insert at End", command=self.insert_at_end, bg="blue", fg="white")
        insert_end_button.pack(pady=5)

        delete_beginning_button = tk.Button(root, text="Delete at Beginning", command=self.delete_at_beginning, bg="orange", fg="white")
        delete_beginning_button.pack(pady=5)

        delete_end_button = tk.Button(root, text="Delete at End", command=self.delete_at_end, bg="red", fg="white")
        delete_end_button.pack(pady=5)

        display_button = tk.Button(root, text="Display List", command=self.display_list, bg="purple", fg="white")
        display_button.pack(pady=5)

    def insert_at_beginning(self):
        element = self.entry.get()
        if element:
            self.list.insert_at_beginning(element)
            self.display_message(f"Inserted {element} at the beginning")
        else:
            messagebox.showwarning("Input Error", "Please enter a value")

    def insert_at_end(self):
        element = self.entry.get()
        if element:
            self.list.insert_at_end(element)
            self.display_message(f"Inserted {element} at the end")
        else:
            messagebox.showwarning("Input Error", "Please enter a value")

    def delete_at_beginning(self):
        result = self.list.delete_at_beginning()
        if result:
            self.display_message(f"Deleted {result} from the beginning")
        else:
            self.display_message("List is empty")

    def delete_at_end(self):
        result = self.list.delete_at_end()
        if result:
            self.display_message(f"Deleted {result} from the end")
        else:
            self.display_message("List is empty")

    def display_list(self):
        result = self.list.traverse()
        self.display_message(result)

    def display_message(self, message):
        self.output.delete(1.0, tk.END)
        self.output.insert(tk.END, message)


if __name__ == "__main__":
    root = tk.Tk()
    gui = LinkedListGUI(root)
    root.mainloop()
